// package controller

// import (
// 	"errors"
// 	"testing"

// 	"github.com/s1nuh3/academy-go-q32021/model"
// 	"github.com/stretchr/testify/assert"
// 	"github.com/stretchr/testify/mock"
// 	"github.com/stretchr/testify/require"
// )

// type ImportHandlerMock struct {
// 	mock.Mock
// }

// func (cm *ImportHandlerMock) ImportUserCtrl(id int) (*model.Users, error) {
// 	args := cm.Called(id)
// 	return args.Get(0).(*model.Users), args.Error(1)
// }

// func TestImportUserRte_Test(t *testing.T) {
// 	assertions := require.New(t)
// 	testCases := []struct {
// 		name     string
// 		expected *model.Users
// 		hasError bool
// 		error    error
// 		ID       int
// 	}{
// 		{
// 			name:     "Successful Import",
// 			expected: &model.Users{ID: 45, Name: "Test"},
// 			hasError: false,
// 			error:    nil,
// 			ID:       45,
// 		},
// 		{
// 			name:     "Failed Import",
// 			expected: nil,
// 			hasError: true,
// 			error:    errors.New("an error ocurred at saving imported user"),
// 			ID:       46,
// 		},
// 	}

// 	for _, tc := range testCases {
// 		t.Run(tc.name, func(t *testing.T) {
// 			mock := ImportHandlerMock{}
// 			mock.On("ImportUserCtrl", tc.ID).Return(tc.expected, tc.error)
// 			uc := NewImportHandler(&mock)

// 			imported, err := uc.ImportHandler(tc.ID)
// 			assertions.EqualValues(tc.expected, imported)

// 			if tc.hasError {
// 				assert.EqualError(t, err, tc.error.Error())
// 			} else {
// 				assert.Nil(t, err)
// 			}
// 		})
// 	}
// 	// testCasespUserService.On("ImportUserCtrl", 45).Return(&model.Users{ID: 1, Name: "Test"}, nil)
// 	// contro := NewImportCtrl(&ImpUserService)
// 	// imported, err := contro.us.ImportUserCtrl(45)
// 	// assertions.NoError(err, "No user was imported ")
// 	// assertions.Equal(&model.Users{ID: 1, Name: "Test"}, imported, "Incorrect user")
// }
ss